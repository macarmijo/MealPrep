{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Maca/Desktop/FullStack-Proyectos/ReactCoderhouse/MealPrep/src/components/CartState.js\",\n    _s = $RefreshSig$();\n\n// CartContext.js con el context y su custom provider (Impórtalo en App.js)\n// Al clickear comprar en ItemDetail se debe guardar en el CartContext el producto y su cantidad en forma de objeto { item: {} , quantity }\n// Detalle importante: CartContext debe tener la lógica incorporada de no aceptar duplicados y mantener su consistencia.\n// Métodos recomendados: \n// addItem(item, quantity) // agregar cierta cantidad de un ítem al carrito\n// removeItem(itemId) // Remover un item del cart por usando su id\n// clear() // Remover todos los items\n// isInCart: (id) => true|false\nimport React, { useState, useEffect } from 'react';\nimport CartContext from './CartContext';\n\nconst CartState = ({\n  children\n}) => {\n  _s();\n\n  const [cart, setCart] = useState([]);\n  const [cantItem, setCantItem] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [quantity, setQuantity] = useState(0);\n  const [orderIds, setOrderIds] = useState([]);\n  const [venta, setVenta] = useState({\n    nroPedido: \"\",\n    productos: [],\n    total: \"\"\n  });\n\n  const addToCart = ({\n    item,\n    cantidad,\n    id\n  }) => {\n    const double = cart.find(product => product.item.id === id);\n\n    if (double !== undefined) {\n      const duplicado = cart.findIndex(product => product.item.id == id);\n      cart.splice(duplicado, 1, {\n        item: item,\n        cantidad: cantidad + double.cantidad\n      });\n    } else {\n      setCart([...cart, {\n        item: item,\n        cantidad: cantidad\n      }]);\n    }\n  };\n\n  const isInCart = id => {\n    let repeat = cart.find(product => product.item.id === id);\n    return repeat ? true : false;\n  };\n\n  const deleteItem = id => {\n    const newCart = cart.filter(producto => producto.item.id !== id);\n    setCart(newCart);\n  };\n\n  const clearCart = () => {\n    setCart([]);\n    setCantItem(0);\n  };\n\n  const updateCantidad = () => {\n    const total = cart.reduce((accumulator, item) => accumulator + item.cantidad, 0);\n    setCantItem(total); // const oldCart = cart\n    // const newCart = oldCart.map(p => {\n    //     if(p.item.id === id){\n    //         p.cantidad = cantidad\n    //     }\n    //     return p\n    // })\n    // setCart(newCart)\n  }; // const getTotal = () => {\n  //     const sum = cart.reduce((accumulator, item) => accumulator + item.price*item.cantidad, 0)\n  //     setTotal(sum)\n  // }\n\n\n  useEffect(() => {\n    updateCantidad();\n    let total = 0;\n    const totales = cart.map(p => p.price * p.cantidad);\n    totales.map(p => total = total + p);\n    setTotal(total);\n    const cartCant = cart.length;\n    setQuantity(cartCant);\n  }, [cart]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      addToCart,\n      isInCart,\n      deleteItem,\n      clearCart,\n      updateCantidad,\n      cantItem,\n      cart,\n      setCart,\n      total,\n      orderIds,\n      setOrderIds,\n      cartEstado,\n      setCartEstado,\n      venta,\n      setVenta\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartState, \"RZpJkcBmDizMwfg86Ai/Xkjw8zQ=\");\n\n_c = CartState;\nexport default CartState;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartState\");","map":{"version":3,"sources":["/Users/Maca/Desktop/FullStack-Proyectos/ReactCoderhouse/MealPrep/src/components/CartState.js"],"names":["React","useState","useEffect","CartContext","CartState","children","cart","setCart","cantItem","setCantItem","total","setTotal","quantity","setQuantity","orderIds","setOrderIds","venta","setVenta","nroPedido","productos","addToCart","item","cantidad","id","double","find","product","undefined","duplicado","findIndex","splice","isInCart","repeat","deleteItem","newCart","filter","producto","clearCart","updateCantidad","reduce","accumulator","totales","map","p","price","cartCant","length","cartEstado","setCartEstado"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAE9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAE,EAAF,CAAxC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC;AAC/BiB,IAAAA,SAAS,EAAC,EADqB;AAE/BC,IAAAA,SAAS,EAAC,EAFqB;AAG/BT,IAAAA,KAAK,EAAC;AAHyB,GAAD,CAAlC;;AAOA,QAAMU,SAAS,GAAG,CAAC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,QAAP;AAAiBC,IAAAA;AAAjB,GAAD,KAA0B;AAExC,UAAMC,MAAM,GAAGlB,IAAI,CAACmB,IAAL,CAAUC,OAAO,IAAIA,OAAO,CAACL,IAAR,CAAaE,EAAb,KAAoBA,EAAzC,CAAf;;AAEA,QAAGC,MAAM,KAAKG,SAAd,EAAwB;AACpB,YAAMC,SAAS,GAAGtB,IAAI,CAACuB,SAAL,CAAeH,OAAO,IAAIA,OAAO,CAACL,IAAR,CAAaE,EAAb,IAAmBA,EAA7C,CAAlB;AACAjB,MAAAA,IAAI,CAACwB,MAAL,CAAYF,SAAZ,EAAuB,CAAvB,EACI;AACIP,QAAAA,IAAI,EAAEA,IADV;AAEIC,QAAAA,QAAQ,EAAEA,QAAQ,GAAGE,MAAM,CAACF;AAFhC,OADJ;AAKH,KAPD,MAOK;AACDf,MAAAA,OAAO,CAAC,CACJ,GAAGD,IADC,EAEJ;AACIe,QAAAA,IAAI,EAAEA,IADV;AAEIC,QAAAA,QAAQ,EAAEA;AAFd,OAFI,CAAD,CAAP;AAOH;AACJ,GApBD;;AAsBA,QAAMS,QAAQ,GAAGR,EAAE,IAAI;AACnB,QAAIS,MAAM,GAAG1B,IAAI,CAACmB,IAAL,CAAUC,OAAO,IAAIA,OAAO,CAACL,IAAR,CAAaE,EAAb,KAAoBA,EAAzC,CAAb;AACA,WAAQS,MAAM,GAAG,IAAH,GAAQ,KAAtB;AACH,GAHD;;AAKA,QAAMC,UAAU,GAAGV,EAAE,IAAI;AACrB,UAAMW,OAAO,GAAG5B,IAAI,CAAC6B,MAAL,CAAYC,QAAQ,IAAIA,QAAQ,CAACf,IAAT,CAAcE,EAAd,KAAqBA,EAA7C,CAAhB;AACAhB,IAAAA,OAAO,CAAC2B,OAAD,CAAP;AACH,GAHD;;AAKA,QAAMG,SAAS,GAAG,MAAM;AACpB9B,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,WAAW,CAAC,CAAD,CAAX;AACH,GAHD;;AAKA,QAAM6B,cAAc,GAAG,MAAM;AACzB,UAAM5B,KAAK,GAAGJ,IAAI,CAACiC,MAAL,CAAY,CAACC,WAAD,EAAcnB,IAAd,KAAuBmB,WAAW,GAAGnB,IAAI,CAACC,QAAtD,EAAgE,CAAhE,CAAd;AACAb,IAAAA,WAAW,CAACC,KAAD,CAAX,CAFyB,CAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAXD,CAnD8B,CAgE9B;AACA;AACA;AACA;;;AAEAR,EAAAA,SAAS,CAAC,MAAI;AACVoC,IAAAA,cAAc;AACd,QAAI5B,KAAK,GAAG,CAAZ;AACA,UAAM+B,OAAO,GAAGnC,IAAI,CAACoC,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,KAAF,GAAUD,CAAC,CAACrB,QAA1B,CAAhB;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYC,CAAC,IAAIjC,KAAK,GAACA,KAAK,GAACiC,CAA7B;AACAhC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACA,UAAMmC,QAAQ,GAAGvC,IAAI,CAACwC,MAAtB;AACAjC,IAAAA,WAAW,CAACgC,QAAD,CAAX;AAEH,GATQ,EASN,CAACvC,IAAD,CATM,CAAT;AAcA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBc,MAAAA,SADyB;AAEzBW,MAAAA,QAFyB;AAGzBE,MAAAA,UAHyB;AAIzBI,MAAAA,SAJyB;AAKzBC,MAAAA,cALyB;AAMzB9B,MAAAA,QANyB;AAOzBF,MAAAA,IAPyB;AAQzBC,MAAAA,OARyB;AASzBG,MAAAA,KATyB;AAUzBI,MAAAA,QAVyB;AAWzBC,MAAAA,WAXyB;AAYzBgC,MAAAA,UAZyB;AAazBC,MAAAA,aAbyB;AAczBhC,MAAAA,KAdyB;AAezBC,MAAAA;AAfyB,KAA7B;AAAA,cAiBKZ;AAjBL;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAxGD;;GAAMD,S;;KAAAA,S;AA0GN,eAAeA,SAAf","sourcesContent":["// CartContext.js con el context y su custom provider (Impórtalo en App.js)\n// Al clickear comprar en ItemDetail se debe guardar en el CartContext el producto y su cantidad en forma de objeto { item: {} , quantity }\n// Detalle importante: CartContext debe tener la lógica incorporada de no aceptar duplicados y mantener su consistencia.\n// Métodos recomendados: \n// addItem(item, quantity) // agregar cierta cantidad de un ítem al carrito\n// removeItem(itemId) // Remover un item del cart por usando su id\n// clear() // Remover todos los items\n// isInCart: (id) => true|false\nimport React, {useState, useEffect} from 'react'\nimport CartContext from './CartContext'\n\nconst CartState = ({children}) => {\n\n    const [cart, setCart] = useState([])\n    const [cantItem, setCantItem] = useState(0)\n    const [total, setTotal] = useState(0)\n    const [quantity, setQuantity] = useState(0)\n    const [orderIds, setOrderIds] = useState ([])\n    const [venta, setVenta] = useState({\n        nroPedido:\"\",\n        productos:[],\n        total:\"\"\n    })\n      \n\n    const addToCart = ({item, cantidad, id}) => {\n\n        const double = cart.find(product => product.item.id === id)\n\n        if(double !== undefined){\n            const duplicado = cart.findIndex(product => product.item.id == id)\n            cart.splice(duplicado, 1, \n                {\n                    item: item, \n                    cantidad: cantidad + double.cantidad\n            })\n        }else{\n            setCart([\n                ...cart,\n                {\n                    item: item,\n                    cantidad: cantidad\n                } \n            ])\n        }        \n    }\n\n    const isInCart = id => {\n        let repeat = cart.find(product => product.item.id === id)\n        return (repeat ? true:false)\n    }\n\n    const deleteItem = id => {\n        const newCart = cart.filter(producto => producto.item.id !== id)\n        setCart(newCart)\n    }\n\n    const clearCart = () => {\n        setCart([])\n        setCantItem(0)\n    }\n\n    const updateCantidad = () => {\n        const total = cart.reduce((accumulator, item) => accumulator + item.cantidad, 0)\n        setCantItem(total);\n        // const oldCart = cart\n        // const newCart = oldCart.map(p => {\n        //     if(p.item.id === id){\n        //         p.cantidad = cantidad\n        //     }\n        //     return p\n        // })\n        // setCart(newCart)\n    }\n\n    // const getTotal = () => {\n    //     const sum = cart.reduce((accumulator, item) => accumulator + item.price*item.cantidad, 0)\n    //     setTotal(sum)\n    // }\n\n    useEffect(()=>{\n        updateCantidad();\n        let total = 0\n        const totales = cart.map(p => p.price * p.cantidad)\n        totales.map(p => total=total+p)\n        setTotal(total)\n        const cartCant = cart.length\n        setQuantity(cartCant)\n        \n    }, [cart])\n    \n       \n    \n  \n    return (\n        <CartContext.Provider value={{\n            addToCart, \n            isInCart, \n            deleteItem,\n            clearCart, \n            updateCantidad, \n            cantItem, \n            cart,\n            setCart, \n            total, \n            orderIds,\n            setOrderIds,\n            cartEstado, \n            setCartEstado,\n            venta,\n            setVenta\n            }}>\n            {children}\n        </CartContext.Provider>\n    )\n}\n\nexport default CartState\n"]},"metadata":{},"sourceType":"module"}