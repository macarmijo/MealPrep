{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Maca/Desktop/FullStack-Proyectos/ReactCoderhouse/MealPrep/src/components/CartState.js\",\n    _s = $RefreshSig$();\n\n// CartContext.js con el context y su custom provider (Impórtalo en App.js)\n// Al clickear comprar en ItemDetail se debe guardar en el CartContext el producto y su cantidad en forma de objeto { item: {} , quantity }\n// Detalle importante: CartContext debe tener la lógica incorporada de no aceptar duplicados y mantener su consistencia.\n// Métodos recomendados: \n// addItem(item, quantity) // agregar cierta cantidad de un ítem al carrito\n// removeItem(itemId) // Remover un item del cart por usando su id\n// clear() // Remover todos los items\n// isInCart: (id) => true|false\nimport React, { useState, useEffect } from 'react';\nimport CartContext from './CartContext';\n\nconst CartState = ({\n  children\n}) => {\n  _s();\n\n  const itemsInLocal = () => {\n    if (localStorage.getItem('cart') !== null) {\n      return JSON.parse(localStorage.getItem('cart'));\n    } else {\n      return [];\n    }\n  };\n\n  const ordersInLocal = () => {\n    if (localStorage.getItem('my-orders') !== null) {\n      return JSON.parse(localStorage.getItem('my-orders'));\n    } else {\n      return [];\n    }\n  };\n\n  const [cart, setCart] = useState(itemsInLocal);\n  const [cantidadItem, setCantidadItem] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [items, setItems] = useState(0);\n  const [orderIds, setOrderIds] = useState(ordersInLocal); // const [cartStatus, setCartStatus] = useState(true)\n  // const [venta, setVenta] = useState({\n  //     nroPedido:\"\",\n  //     productos:[],\n  //     total:\"\"\n  // })\n\n  const addItem = ({\n    item,\n    cantidad,\n    id\n  }) => {\n    const double = cart.find(product => product.item.id === id);\n\n    if (double !== undefined) {\n      const duplicado = cart.findIndex(product => product.item.id == id);\n      cart.splice(duplicado, 1, {\n        item: item,\n        cantidad: cantidad + double.cantidad\n      });\n    } else {\n      setCart([...cart, {\n        item: item,\n        cantidad: cantidad\n      }]);\n    }\n  };\n\n  const isInCart = id => {\n    let itemR = cart.find(product => product.item.id === id);\n    return itemR ? true : false;\n  };\n\n  const deleteItem = id => {\n    const newCart = cart.filter(producto => producto.item.id !== id);\n    setCart(newCart);\n    localStorage.setItem('cart', JSON.stringify(newCart));\n  };\n\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  const updateCantidad = (id, cantidad) => {\n    const total = cart.reduce((accumulator, item) => accumulator + item.cantidad, 0);\n    setItems(total); // const oldCart = cart\n    // const newCart = oldCart.map(p => {\n    //     if(p.item.id === id){\n    //         p.cantidad = cantidad\n    //     }\n    //     return p\n    // })\n    // setCart(newCart)\n  };\n\n  const getTotal = () => {\n    const sum = cart.reduce((accumulator, producto) => accumulator + producto.price * producto.cantidad, 0);\n    setTotal(sum);\n  };\n\n  useEffect(() => {\n    updateCantidad();\n    localStorage.setItem('cart', JSON.stringify(cart));\n    localStorage.setItem('my-orders', JSON.stringify(orderIds));\n    getTotal(); // let total =  0;\n    // let totals = cart.map( p => p.item.precio * p.cantidad)\n    // totals.map(t => total += t)\n    // setTotal(cart.reduce((accumulator, currentValue) => accumulator + (currentValue.item.precio * currentValue.cantidad), 0))\n    // setCantidadItem(cart.reduce((accumulator, currentValue) => accumulator + currentValue.cantidad, 0))\n  }, [cart]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      addItem,\n      isInCart,\n      deleteItem,\n      clearCart,\n      updateCantidad,\n      cantidadItem,\n      cart,\n      total,\n      orderIds,\n      setOrderIds,\n      itemsInLocal,\n      ordersInLocal,\n      items\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartState, \"55dkEWbsVSJu7N5Y5z8NirndAFk=\");\n\n_c = CartState;\nexport default CartState;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartState\");","map":{"version":3,"sources":["/Users/Maca/Desktop/FullStack-Proyectos/ReactCoderhouse/MealPrep/src/components/CartState.js"],"names":["React","useState","useEffect","CartContext","CartState","children","itemsInLocal","localStorage","getItem","JSON","parse","ordersInLocal","cart","setCart","cantidadItem","setCantidadItem","total","setTotal","items","setItems","orderIds","setOrderIds","addItem","item","cantidad","id","double","find","product","undefined","duplicado","findIndex","splice","isInCart","itemR","deleteItem","newCart","filter","producto","setItem","stringify","clearCart","updateCantidad","reduce","accumulator","getTotal","sum","price"],"mappings":"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","sourcesContent":["// CartContext.js con el context y su custom provider (Impórtalo en App.js)\n// Al clickear comprar en ItemDetail se debe guardar en el CartContext el producto y su cantidad en forma de objeto { item: {} , quantity }\n// Detalle importante: CartContext debe tener la lógica incorporada de no aceptar duplicados y mantener su consistencia.\n// Métodos recomendados: \n// addItem(item, quantity) // agregar cierta cantidad de un ítem al carrito\n// removeItem(itemId) // Remover un item del cart por usando su id\n// clear() // Remover todos los items\n// isInCart: (id) => true|false\nimport React, {useState, useEffect} from 'react'\nimport CartContext from './CartContext'\n\nconst CartState = ({children}) => {\n\n    const itemsInLocal = () => {\n        if (localStorage.getItem('cart') !== null){\n           return JSON.parse(localStorage.getItem('cart')) \n        }else{\n            return [];\n        }\n    }\n\n    const ordersInLocal = () => {\n        if (localStorage.getItem('my-orders') !== null){\n            return JSON.parse(localStorage.getItem('my-orders'))\n        }else{\n            return [];\n        }\n    }\n\n    const [cart, setCart] = useState( itemsInLocal )\n    const [cantidadItem, setCantidadItem] = useState(0)\n    const [total, setTotal] = useState(0)\n    const [items, setItems] = useState(0)\n    const [orderIds, setOrderIds] = useState (ordersInLocal)\n    // const [cartStatus, setCartStatus] = useState(true)\n    // const [venta, setVenta] = useState({\n    //     nroPedido:\"\",\n    //     productos:[],\n    //     total:\"\"\n    // })\n      \n\n    const addItem = ({item, cantidad, id}) => {\n\n        const double = cart.find(product => product.item.id === id)\n\n        if(double !== undefined){\n            const duplicado = cart.findIndex(product => product.item.id == id)\n            cart.splice(duplicado, 1, \n                {\n                    item: item, \n                    cantidad: cantidad + double.cantidad\n            })\n        }else{\n            setCart([\n                ...cart,\n                {\n                    item: item,\n                    cantidad: cantidad\n                } \n            ])\n        }        \n    }\n\n    const isInCart = id => {\n        let itemR = cart.find(product => product.item.id === id)\n        return (itemR ? true:false)\n    }\n\n    const deleteItem = id => {\n        const newCart = cart.filter(producto => producto.item.id !== id)\n        setCart(newCart)\n        localStorage.setItem('cart', JSON.stringify(newCart))\n    }\n\n    const clearCart = () => {\n        setCart([])\n    }\n\n    const updateCantidad = (id, cantidad) => {\n        const total = cart.reduce((accumulator, item) => accumulator + item.cantidad, 0)\n        setItems(total);\n        // const oldCart = cart\n        // const newCart = oldCart.map(p => {\n        //     if(p.item.id === id){\n        //         p.cantidad = cantidad\n        //     }\n        //     return p\n        // })\n        // setCart(newCart)\n    }\n\n    const getTotal = () => {\n        const sum = cart.reduce((accumulator, producto) => accumulator + producto.price*producto.cantidad, 0)\n        setTotal(sum)\n    }\n\n    useEffect(()=>{\n\n        updateCantidad();\n        localStorage.setItem('cart', JSON.stringify(cart))\n        localStorage.setItem('my-orders', JSON.stringify(orderIds))\n        getTotal();\n        // let total =  0;\n        // let totals = cart.map( p => p.item.precio * p.cantidad)\n        // totals.map(t => total += t)\n        // setTotal(cart.reduce((accumulator, currentValue) => accumulator + (currentValue.item.precio * currentValue.cantidad), 0))\n        // setCantidadItem(cart.reduce((accumulator, currentValue) => accumulator + currentValue.cantidad, 0))\n        \n    }, [cart])\n    \n       \n    \n  \n    return (\n        <CartContext.Provider value={{\n            addItem, \n            isInCart, \n            deleteItem,\n            clearCart, \n            updateCantidad, \n            cantidadItem, \n            cart, \n            total, \n            orderIds,\n            setOrderIds,\n            itemsInLocal,\n            ordersInLocal,\n            items\n            }}>\n            {children}\n        </CartContext.Provider>\n    )\n}\n\nexport default CartState\n"]},"metadata":{},"sourceType":"module"}