{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Maca/Desktop/FullStack-Proyectos/ReactCoderhouse/MealPrep/src/components/CartState.js\",\n    _s = $RefreshSig$();\n\n// CartContext.js con el context y su custom provider (Impórtalo en App.js)\n// Al clickear comprar en ItemDetail se debe guardar en el CartContext el producto y su cantidad en forma de objeto { item: {} , quantity }\n// Detalle importante: CartContext debe tener la lógica incorporada de no aceptar duplicados y mantener su consistencia.\n// Métodos recomendados: \n// addItem(item, quantity) // agregar cierta cantidad de un ítem al carrito\n// removeItem(itemId) // Remover un item del cart por usando su id\n// clear() // Remover todos los items\n// isInCart: (id) => true|false\nimport React, { useState, useEffect } from 'react';\nimport CartContext from './CartContext';\n\nconst CartState = ({\n  children\n}) => {\n  _s();\n\n  const [cart, setCart] = useState([]);\n  const [quantity, setQuantity] = useState(0);\n  const [total, setTotal] = useState(); // useEffect(() => {\n  // }, [cart])\n\n  const getTotal = () => {\n    var t = 0; // Con el map obtengo el total por producto\n\n    const totals = cart.map(p => p.price * p.amount); // Sumo a t el total por producto de cada uno\n\n    totals.map(p => t = t + p); // Lo guardo en el estado\n\n    setTotal(t);\n  };\n\n  const cartCant = () => {\n    // Calculo la cantidad de productos\n    const cartQuantity = cart.length; // Las guardo en el estado\n\n    setQuantity(cartQuantity);\n  }; // Función para ver si el producto está en el carrito\n\n\n  function isInCart(id) {\n    const item = cart.find(p => p.id === id);\n\n    if (item === undefined) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  function addToCart(product, counter, id) {\n    // Si el producto está en el carrito, le agrego la cantidad, no un producto nuevo\n    if (isInCart(id)) {\n      // Encuentro el producto \n      const oldProduct = cart.find(p => p.id === id); // Armo la nueva cantidad de productos\n\n      const newQuantity = oldProduct.amount + counter; // Armo el nuevo producto cambiandole la cantidad\n\n      const newProduct = {\n        id: oldProduct.id,\n        name: oldProduct.name,\n        image: oldProduct.image,\n        price: oldProduct.price,\n        amount: newQuantity\n      }; // Elimino el antiguo producto para no tener duplicados\n\n      const cartWithoutOld = cart.filter(product => product.id = !id); // Agrego el nuevo producto\n\n      const cartWithNew = [...cartWithoutOld, newProduct]; // Guardo en el estado el nuevo listado\n\n      setCart(cartWithNew);\n    } else {\n      // Guardo en el estado cart el producto que eligió y la cantidad\n      const newItem = {\n        id: product.id,\n        name: product.name,\n        image: product.image,\n        price: product.price,\n        amount: counter\n      };\n      setCart([...cart, newItem]);\n    }\n  }\n\n  function eliminateFromCart(id) {\n    // Elimino el producto por Id filtrando y quedandome con todos los que no tienen el id seleccionado\n    const newCart = cart.filter(product => product.id !== id); // Guardo el nuevo carrito\n\n    setCart(newCart);\n  }\n\n  function clearCart() {\n    // Guardo como estado un array vacío\n    setCart([]);\n    setQuantity(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      quantity,\n      total,\n      addToCart,\n      eliminateFromCart,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartState, \"n7+vNjJHFyD9fcygVQ4etL/Q8Cs=\");\n\n_c = CartState;\nexport default CartState;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartState\");","map":{"version":3,"sources":["/Users/Maca/Desktop/FullStack-Proyectos/ReactCoderhouse/MealPrep/src/components/CartState.js"],"names":["React","useState","useEffect","CartContext","CartState","children","cart","setCart","quantity","setQuantity","total","setTotal","getTotal","t","totals","map","p","price","amount","cartCant","cartQuantity","length","isInCart","id","item","find","undefined","addToCart","product","counter","oldProduct","newQuantity","newProduct","name","image","cartWithoutOld","filter","cartWithNew","newItem","eliminateFromCart","newCart","clearCart"],"mappings":"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","sourcesContent":["// CartContext.js con el context y su custom provider (Impórtalo en App.js)\n// Al clickear comprar en ItemDetail se debe guardar en el CartContext el producto y su cantidad en forma de objeto { item: {} , quantity }\n// Detalle importante: CartContext debe tener la lógica incorporada de no aceptar duplicados y mantener su consistencia.\n// Métodos recomendados: \n// addItem(item, quantity) // agregar cierta cantidad de un ítem al carrito\n// removeItem(itemId) // Remover un item del cart por usando su id\n// clear() // Remover todos los items\n// isInCart: (id) => true|false\nimport React, {useState, useEffect} from 'react'\nimport CartContext from './CartContext'\n\nconst CartState = ({children}) => {\n    \n    const [ cart, setCart ] = useState([])\n    const [ quantity, setQuantity ] = useState(0)\n    const [ total, setTotal ] = useState()\n\n    // useEffect(() => {\n       \n    // }, [cart])\n\n\n    const getTotal = () => {\n        var t = 0\n        // Con el map obtengo el total por producto\n        const totals = cart.map( p => p.price * p.amount)\n        // Sumo a t el total por producto de cada uno\n        totals.map( p => t = t + p)\n        // Lo guardo en el estado\n        setTotal(t)\n    }\n    const cartCant = () => {\n         // Calculo la cantidad de productos\n         const cartQuantity = cart.length\n         // Las guardo en el estado\n         setQuantity(cartQuantity)\n    }\n\n\n    // Función para ver si el producto está en el carrito\n    function isInCart(id){\n        const item = cart.find(p => p.id === id)\n        if (item === undefined){\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    function addToCart(product, counter, id) {\n         \n        // Si el producto está en el carrito, le agrego la cantidad, no un producto nuevo\n        if (isInCart(id)){\n            // Encuentro el producto \n            const oldProduct = cart.find(p => p.id === id)\n            // Armo la nueva cantidad de productos\n            const newQuantity = oldProduct.amount + counter           \n            // Armo el nuevo producto cambiandole la cantidad\n            const newProduct = { id: oldProduct.id, name: oldProduct.name, image: oldProduct.image, price: oldProduct.price, amount: newQuantity}\n            // Elimino el antiguo producto para no tener duplicados\n            const cartWithoutOld = cart.filter(product => product.id =! id)\n            // Agrego el nuevo producto\n            const cartWithNew = [...cartWithoutOld, newProduct]\n            // Guardo en el estado el nuevo listado\n            setCart(cartWithNew)            \n        } else {\n            // Guardo en el estado cart el producto que eligió y la cantidad\n            const newItem = { id: product.id, name: product.name, image: product.image, price: product.price, amount: counter }\n            setCart([...cart, newItem]) \n        }\n    }\n\n    function eliminateFromCart(id){\n        // Elimino el producto por Id filtrando y quedandome con todos los que no tienen el id seleccionado\n        const newCart = cart.filter(product => product.id !== id)\n        // Guardo el nuevo carrito\n        setCart(newCart)\n    }\n\n    function clearCart(){\n        // Guardo como estado un array vacío\n        setCart([])\n        setQuantity(0)\n    }\n    \n       \n    \n  \n    return (\n        <CartContext.Provider value={{\n             cart,\n             quantity, \n             total, \n             addToCart, \n             eliminateFromCart, \n             clearCart \n            }}>\n            {children}\n        </CartContext.Provider>\n    )\n}\n\nexport default CartState\n"]},"metadata":{},"sourceType":"module"}