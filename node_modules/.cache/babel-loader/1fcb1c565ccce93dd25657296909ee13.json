{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Maca/Desktop/FullStack-Proyectos/ReactCoderhouse/MealPrep/src/components/CartState.js\",\n    _s = $RefreshSig$();\n\n// CartContext.js con el context y su custom provider (Impórtalo en App.js)\n// Al clickear comprar en ItemDetail se debe guardar en el CartContext el producto y su cantidad en forma de objeto { item: {} , quantity }\n// Detalle importante: CartContext debe tener la lógica incorporada de no aceptar duplicados y mantener su consistencia.\n// Métodos recomendados: \n// addItem(item, quantity) // agregar cierta cantidad de un ítem al carrito\n// removeItem(itemId) // Remover un item del cart por usando su id\n// clear() // Remover todos los items\n// isInCart: (id) => true|false\nimport React, { useState, useEffect } from 'react';\nimport CartContext from './CartContext';\n\nconst CartState = ({\n  children\n}) => {\n  _s();\n\n  const [cart, setCart] = useState([]);\n  const [cantItems, setCantItems] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [idOrden, setIdOrden] = useState([]);\n  const [carritoEstado, setCarritoEstado] = useState(true);\n  const [venta, setVenta] = useState({\n    nroPedido: \"\",\n    productos: [],\n    fecha: \"\",\n    total: \"\"\n  });\n\n  const addToCart = ({\n    item,\n    cantidad\n  }) => {\n    setCart([...cart, {\n      item: item,\n      cantidad: cantidad\n    }]);\n  };\n\n  const isInCart = id => {\n    let existe = cart.find(producto => producto.item.id === id);\n    return existe ? true : false;\n  };\n\n  const removeItem = id => {\n    const nuevoCart = cart.filter(producto => producto.item.id !== id);\n    setCart(nuevoCart);\n  };\n\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  const updateCantidad = (id, cantidad) => {\n    const oldCart = cart;\n    const newCart = oldCart.map(p => {\n      if (p.item.id === id) {\n        p.cantidad = cantidad;\n      }\n\n      return p;\n    });\n    setCart(newCart);\n  };\n\n  useEffect(() => {\n    setTotal(cart.reduce((accumulator, currentValue) => accumulator + currentValue.item.price * currentValue.cantidad, 0));\n    setCantItems(cart.reduce((accumulator, currentValue) => accumulator + currentValue.cantidad, 0));\n  }, [cart]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      addToCart,\n      isInCart,\n      idOrden,\n      setIdOrden,\n      carritoEstado,\n      setCarritoEstado,\n      removeItem,\n      clearCart,\n      updateCantidad,\n      cantItems,\n      cart,\n      total,\n      venta,\n      setVenta\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartState, \"SaX14W4QUmqfVwp+8oxCneBny6s=\");\n\n_c = CartState;\nexport default CartState;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartState\");","map":{"version":3,"sources":["/Users/Maca/Desktop/FullStack-Proyectos/ReactCoderhouse/MealPrep/src/components/CartState.js"],"names":["React","useState","useEffect","CartContext","CartState","children","cart","setCart","cantItems","setCantItems","total","setTotal","idOrden","setIdOrden","carritoEstado","setCarritoEstado","venta","setVenta","nroPedido","productos","fecha","addToCart","item","cantidad","isInCart","id","existe","find","producto","removeItem","nuevoCart","filter","clearCart","updateCantidad","oldCart","newCart","map","p","reduce","accumulator","currentValue","price"],"mappings":"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","sourcesContent":["// CartContext.js con el context y su custom provider (Impórtalo en App.js)\n// Al clickear comprar en ItemDetail se debe guardar en el CartContext el producto y su cantidad en forma de objeto { item: {} , quantity }\n// Detalle importante: CartContext debe tener la lógica incorporada de no aceptar duplicados y mantener su consistencia.\n// Métodos recomendados: \n// addItem(item, quantity) // agregar cierta cantidad de un ítem al carrito\n// removeItem(itemId) // Remover un item del cart por usando su id\n// clear() // Remover todos los items\n// isInCart: (id) => true|false\nimport React, {useState, useEffect} from 'react'\nimport CartContext from './CartContext'\n\nconst CartState = ({children}) => {\n\n    const [cart, setCart] = useState([])\n    const [cantItems, setCantItems] = useState(0)\n    const [total, setTotal] = useState(0)\n    const [idOrden, setIdOrden] = useState([])\n    const [carritoEstado, setCarritoEstado] = useState(true);\n    const [venta, setVenta] = useState({\n        nroPedido: \"\",\n        productos: [],\n        fecha: \"\",\n        total: \"\"\n    });\n\n    const addToCart = ({item, cantidad}) => {\n\t\tsetCart([\n\t\t\t...cart,\n\t\t\t{\n                item: item,\n\t\t\t\tcantidad: cantidad\n\t\t\t}\n        ])\n    }\n    const isInCart = id => {\n        let existe = cart.find(producto => producto.item.id === id)\n        return existe?true:false\n    }\n    const removeItem = id => {\n        const nuevoCart = cart.filter(producto => producto.item.id !== id)\n        setCart(nuevoCart)\n    }\n    const clearCart = () =>{\n        setCart([])\n    }\n    const updateCantidad = (id, cantidad) =>{\n        const oldCart = cart\n        const newCart = oldCart.map(p => {\n            if(p.item.id === id){\n                p.cantidad = cantidad\n            }\n            return p\n        })\n        setCart( newCart )\n    }\n    \n    useEffect(() => {\n        setTotal(cart.reduce((accumulator, currentValue) => accumulator + (currentValue.item.price * currentValue.cantidad), 0));\n        setCantItems(cart.reduce((accumulator, currentValue) => accumulator + currentValue.cantidad, 0));\n    }, [cart])\n    \n       \n    return (\n        <CartContext.Provider value={{\n            addToCart, \n            isInCart, \n            idOrden, \n            setIdOrden, \n            carritoEstado, \n            setCarritoEstado, \n            removeItem, \n            clearCart, \n            updateCantidad, \n            cantItems, \n            cart, \n            total, \n            venta, \n            setVenta\n            }}>\n            {children}\n        </CartContext.Provider>\n    )\n}\n\nexport default CartState\n"]},"metadata":{},"sourceType":"module"}